// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id                String    @id @default(uuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  name              String?
  email             String    @unique
  hashedPassword    String?
  role              RoleType  @default(USER)
  emailVerification DateTime?

  birthdayDate   DateTime
  gender         GenderType
  avatarImageKey String?
  coverImageKey  String?
  username       String?    @unique
  bio            String?
  onboarded      Boolean    @default(true)

  settingsEmailMarketing Boolean @default(true)
  settingsEmailProduct   Boolean @default(true)

  tokens        Token[]
  sessions      Session[]
  subscriptions Subscription[]
  blogs         Blog[]

  cart            Cart?
  order           Order[] @relation("OrderUser")
  deliveredOrders Order[] @relation("OrderLivreur")
}

model Product {
  id              String       @id @default(uuid())
  title           String
  description     String
  language        String
  productImageKey String
  price           Float
  author          String?
  isbn            String?
  category        BookCategory

  cartItems  CartItem[]
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model CartItem {
  id       String @id @default(uuid())
  quantity Int

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId String

  @@unique([cartId, productId])
}

model Cart {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items CartItem[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@unique([userId])
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Order {
  id         String      @id @default(uuid())
  totalPrice Float
  status     OrderStatus

  items OrderItem[]

  user   User?   @relation("OrderUser", fields: [userId], references: [id])
  userId String?

  livreur   User?   @relation("OrderLivreur", fields: [livreurId], references: [id])
  livreurId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id               String    @id @default(uuid())
  startDate        DateTime
  endDate          DateTime?
  subscriptionCost Float
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Blog {
  id           String   @id @default(uuid())
  title        String
  blogImageKey String?
  category     String?
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?
}

model Session {
  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Token {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum RoleType {
  ADMIN
  COACH
  LIVREUR
  USER
}

enum GenderType {
  MALE
  FEMALE
}

enum BookCategory {
  FICTION
  NON_FICTION
  FANTASY
  SCIENCE_FICTION
  MYSTERY
  ROMANCE
  HISTORY
  BIOGRAPHY
  SELF_HELP
  CHILDREN
  OTHER
}

enum OrderStatus {
  CREATED
  PROCESSING
  SHIPPED
  DELIVERED
}
